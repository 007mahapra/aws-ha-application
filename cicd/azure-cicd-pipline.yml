trigger:
# Maha : Trigger only when the code is pushed to main and if there is changes in application code (web or app)
# In case any changes done in the terraform code, the pipeline will not trigger by default as the condition is not met.
  branches:
    include:
      - main
  paths:
    include:
      - application-tier/**
      - presentation-tier/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  ECR_APPLICATION_REPO_NAME: 'ha-app-application-tier'
  ECR_PRESENTATION_REPO_NAME: 'ha-app-presentation-tier'

stages:
  - stage: BuildAndPushToECR
    jobs:
      - job: BuildAndPushToECR
        displayName: Build and Push Docker Images to AWS ECR
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          
          # Install dependencies: AWS CLI, jq 
          - script: |
              echo "Installing AWS CLI v2 and jq"
              sudo apt-get update
              sudo apt-get install -y awscli jq
            displayName: 'Install AWS CLI and jq'

          # Login to AWS ECR using AWS CLI and get the login command
          - script: |
              echo "Logging in to AWS ECR"
              ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text )
              aws ecr get-login-password | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.$(AWS_DEFAULT_REGION).amazonaws.com
            displayName: 'Login to AWS ECR'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
              
          # Create application-tier ECR repository if it doesn't exist
          - script: |
              echo "Creating ECR repository for application-tier"
              aws ecr describe-repositories --repository-names $(ECR_APPLICATION_REPO_NAME) || aws ecr create-repository --repository-name $(ECR_APPLICATION_REPO_NAME)
            displayName: 'Create Application ECR Repository'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # Create presentation-tier ECR repository if it doesn't exist
          - script: |
              echo "Creating ECR repository for presentation-tier"
              aws ecr describe-repositories --repository-names $(ECR_PRESENTATION_REPO_NAME) || aws ecr create-repository --repository-name $(ECR_PRESENTATION_REPO_NAME)
            displayName: 'Create Presentation ECR Repository'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # Build and push application-tier Docker image to ECR
          - script: |
              echo "Building and pushing application-tier Docker image"
              cd application-tier/
              ECR_APPLICATION_TIER_REPO=$(aws ecr describe-repositories --repository-names $(ECR_APPLICATION_REPO_NAME) | jq -r '.repositories[0].repositoryUri')
              docker build -t ha-app-application-tier .
              docker tag ha-app-application-tier:latest $ECR_APPLICATION_TIER_REPO:latest
              docker push $ECR_APPLICATION_TIER_REPO:latest
            displayName: 'Build and Push Application-Tier Docker Image'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # Build and push presentation-tier Docker image to ECR
          - script: |
              echo "Building and pushing presentation-tier Docker image"
              cd presentation-tier/
              ECR_PRESENTATION_TIER_REPO=$(aws ecr describe-repositories --repository-names $(ECR_PRESENTATION_REPO_NAME) | jq -r '.repositories[0].repositoryUri')
              docker build -t ha-app-presentation-tier .
              docker tag ha-app-presentation-tier:latest $ECR_PRESENTATION_TIER_REPO:latest
              docker push $ECR_PRESENTATION_TIER_REPO:latest
            displayName: 'Build and Push Presentation-Tier Docker Image'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

  - stage: RunTerraform
    jobs:
      - job: Terraform
        displayName: 'Terraform Operations'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          
          # Install Terraform 
          - script: |
              echo "Installing Terraform"
              #sudo apt-get update -y
              sudo apt-get install -y unzip wget
          
              # Download Terraform binary - Mahaveer version 1.5.7 tested locally 
              wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          
              # Unzip and move the binary to /usr/local/bin
              unzip terraform_1.5.0_linux_amd64.zip
          
              # Move Terraform to a directory in the system PATH
              sudo mv terraform /usr/local/bin/
          
              # Ensure Terraform is executable
              sudo chmod +x /usr/local/bin/terraform
          
              # Check Terraform version to confirm installation
              terraform --version
            displayName: 'Install Terraform'

          # Terraform Init
          - script: terraform init
            displayName: 'Terraform Init'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # Terraform Validate
          - script: terraform validate
            displayName: 'Terraform Validate'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # Terraform Plan 
          - script: |
              terraform plan -out=tfplan
              terraform show -no-color tfplan > plan.txt
            displayName: 'Terraform Plan'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
            # Publish the plan file
          - publish: plan.txt
            artifact: terraform-plan

          # # Apply Terraform Plan
          # - script: terraform apply -auto-approve tfplan
          #   displayName: 'Terraform Apply'
          #   continueOnError: true
          #   env:
          #     AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          #     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          #     AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

          # # Handle Apply Failure
          # - script: |
          #     if [ $? -ne 0 ]; then
          #       echo "Apply failed, running destroy"
          #       terraform destroy -auto-approve || true
          #     fi
          #   displayName: 'Handle Terraform Apply Failure'
          #   env:
          #     AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          #     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          #     AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
          #   condition: failed()
